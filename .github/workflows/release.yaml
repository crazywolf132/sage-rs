name: Release

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC every day
  workflow_dispatch:  # Allow manual triggering

# Add concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.commitsense.outputs.version }}
      tag: ${{ steps.create-tag.outputs.tag }}
      is_nightly: ${{ steps.check-event.outputs.is_nightly }}
      has_changes: ${{ steps.commitsense.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for analyzing commits
      
      - name: Determine if nightly
        id: check-event
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "is_nightly=true" >> $GITHUB_OUTPUT
          else
            echo "is_nightly=false" >> $GITHUB_OUTPUT
          fi
      
      # Run CommitSense - handles both regular and nightly releases
      - name: Run CommitSense
        id: commitsense
        uses: foxycorps/commit-sense@0.1.11
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          project-type: rust
          write: "true"  # Enable write mode to update version and generate changelog
          nightly: ${{ steps.check-event.outputs.is_nightly }}  # Use nightly mode for scheduled runs
      
      - name: Debug CommitSense outputs
        run: |
          echo "CommitSense outputs:"
          echo "bump: ${{ steps.commitsense.outputs.bump }}"
          echo "version: ${{ steps.commitsense.outputs.version }}"
          echo "has_changes: ${{ steps.commitsense.outputs.has_changes }}"
          echo "nightly_version: ${{ steps.commitsense.outputs.nightly_version }}"
          echo "All outputs: ${{ toJSON(steps.commitsense.outputs) }}"
      
      # Skip further steps if no changes
      - name: Check if should continue
        id: should-continue
        if: steps.commitsense.outputs.has_changes != 'true'
        run: |
          echo "No changes detected by CommitSense. Skipping release."
          exit 0

      # Commit changes and create tag
      - name: Commit and push changes
        id: create-tag
        if: steps.commitsense.outputs.has_changes == 'true'
        run: |
          # Determine version to use
          if [ "${{ steps.check-event.outputs.is_nightly }}" = "true" ] && [ -n "${{ steps.commitsense.outputs.nightly_version }}" ]; then
            NEW_VERSION="${{ steps.commitsense.outputs.nightly_version }}"
          else
            NEW_VERSION="${{ steps.commitsense.outputs.version }}"
          fi
          
          TAG="v$NEW_VERSION"
          
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # For regular releases, commit the changes
          if [ "${{ steps.check-event.outputs.is_nightly }}" = "false" ]; then
            # Commit the version changes and changelog
            git add Cargo.toml Cargo.lock CHANGELOG.md
            git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
            git push origin HEAD:${{ github.ref }}
          fi
          
          # Create and push tag for all releases
          git tag "$TAG"
          git push origin "$TAG"
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  # Build and release job
  build-and-release:
    needs: release
    if: needs.release.outputs.has_changes == 'true'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.release.outputs.tag }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      # Get Rust version for cache keys
      - name: Get Rust version
        id: rust-version
        run: |
          echo "version=$(rustc --version)" >> $GITHUB_OUTPUT

      # Cache OpenSSL installation
      - name: Cache OpenSSL
        id: cache-openssl
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/opt/openssl@3
            ~/Library/Caches/Homebrew
          key: macos-openssl-aarch64-${{ hashFiles('**/Cargo.lock') }}

      # Use Swatinem/rust-cache for Rust artifacts
      - uses: Swatinem/rust-cache@v2
        with:
          key: aarch64-apple-darwin-${{ steps.rust-version.outputs.version }}
          shared-key: "release-build"
          cache-directories: |
            ~/.cargo/bin/
            target/

      # Install OpenSSL if not cached
      - name: Install OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      # Set OpenSSL env vars if cached
      - name: Set OpenSSL env vars (cached)
        if: steps.cache-openssl.outputs.cache-hit == 'true'
        run: |
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      # Build for ARM macOS
      - name: Build binary
        run: |
          cargo build --release --target aarch64-apple-darwin

      - name: Prepare archive
        shell: bash
        run: |
          cd target/aarch64-apple-darwin/release
          tar czf ../../../sage-aarch64-apple-darwin-${{ needs.release.outputs.version }}.tar.gz sage
          cd -

      # Read the changelog generated by CommitSense
      - name: Read changelog
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG=$(cat CHANGELOG.md)
            
            # Escape content for GitHub Actions
            CHANGELOG="${CHANGELOG//'%'/'%25'}"
            CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
            CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
            echo "content=$CHANGELOG" >> $GITHUB_OUTPUT
          else
            echo "content=No changelog found" >> $GITHUB_OUTPUT
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          name: Release ${{ needs.release.outputs.tag }}
          body: ${{ steps.changelog.outputs.content }}
          prerelease: ${{ needs.release.outputs.is_nightly == 'true' }}
          files: |
            sage-aarch64-apple-darwin-${{ needs.release.outputs.version }}.*
