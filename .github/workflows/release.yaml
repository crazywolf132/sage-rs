name: Release

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC every day

# Add concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  analyze-commits:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.release-type.outputs.type }}
      version_bump: ${{ steps.release-type.outputs.bump }}
      has_changes: ${{ steps.changes.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for analyzing commits
      
      - name: Check for changes since last build
        id: changes
        run: |
          # Get the last release commit (either release or nightly)
          LAST_RELEASE=$(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags | head -n 1 || echo "")
          if [ -z "$LAST_RELEASE" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if there are any new commits since last release
          CHANGES=$(git log $LAST_RELEASE..HEAD --oneline)
          if [ -n "$CHANGES" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine release type
        id: release-type
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # Get commits since last release or all commits if no release exists
          LAST_RELEASE=$(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags | head -n 1 || echo "")
          if [ -z "$LAST_RELEASE" ]; then
            COMMITS=$(git log --format=%B)
          else
            COMMITS=$(git log $LAST_RELEASE..HEAD --format=%B)
          fi
          
          # Look for release commit
          if echo "$COMMITS" | grep -q "^release:"; then
            # Determine version bump based on conventional commits
            if echo "$COMMITS" | grep -q "^BREAKING CHANGE:" || echo "$COMMITS" | grep -q "!:"; then
              echo "type=release" >> $GITHUB_OUTPUT
              echo "bump=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "^feat:"; then
              echo "type=release" >> $GITHUB_OUTPUT
              echo "bump=minor" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "^fix:"; then
              echo "type=release" >> $GITHUB_OUTPUT
              echo "bump=patch" >> $GITHUB_OUTPUT
            else
              echo "type=release" >> $GITHUB_OUTPUT
              echo "bump=patch" >> $GITHUB_OUTPUT
            fi
          else
            # If no release commit, this is a nightly build
            if [ "${{ github.event_name }}" = "schedule" ]; then
              echo "type=nightly" >> $GITHUB_OUTPUT
              echo "bump=none" >> $GITHUB_OUTPUT
            else
              echo "type=skip" >> $GITHUB_OUTPUT
              echo "bump=none" >> $GITHUB_OUTPUT
            fi
          fi

  update-version:
    needs: analyze-commits
    if: needs.analyze-commits.outputs.release_type != 'skip'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      new_tag: ${{ steps.create-tag.outputs.tag }}
      is_release: ${{ steps.check_release.outputs.is_release }}
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          
          if [ "${{ needs.analyze-commits.outputs.release_type }}" = "nightly" ]; then
            # For nightly, append -nightly.YYYYMMDD.HASH
            HASH=$(git rev-parse --short HEAD)
            DATE=$(date +%Y%m%d)
            NEW_VERSION="$CURRENT_VERSION-nightly.$DATE.$HASH"
          else
            # Remove any pre-release suffix for version calculations
            BASE_VERSION=$(echo "$CURRENT_VERSION" | cut -d'-' -f1)
            
            # For release, bump version according to conventional commits
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
            
            # Validate version components
            if [[ ! "$MAJOR" =~ ^[0-9]+$ ]] || [[ ! "$MINOR" =~ ^[0-9]+$ ]] || [[ ! "$PATCH" =~ ^[0-9]+$ ]]; then
              echo "Error: Invalid version format in Cargo.toml"
              exit 1
            fi
            
            case "${{ needs.analyze-commits.outputs.version_bump }}" in
              "major")
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              "patch")
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
              *)
                echo "Error: Invalid version bump type"
                exit 1
                ;;
            esac
          fi
          
          # Validate the new version
          if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "Error: Generated version '$NEW_VERSION' is invalid"
            exit 1
          fi
          
          # Update Cargo.toml with error handling
          if ! sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml; then
            echo "Error: Failed to update version in Cargo.toml"
            exit 1
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        id: create-tag
        run: |
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          TAG="v$NEW_VERSION"
          
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Commit version bump
          git add Cargo.toml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          
          # Create and push tag
          git tag "$TAG"
          git push origin "$TAG"
          git push origin HEAD:${{ github.ref }}
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  build-and-release:
    needs: [analyze-commits, update-version]
    if: needs.analyze-commits.outputs.release_type != 'skip'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds using cross-rs
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
          # macOS builds - ARM64 only
          - os: macos-latest
            target: aarch64-apple-darwin
            cross: true
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Get Rust version for cache keys
      - name: Get Rust version
        id: rust-version
        run: |
          echo "version=$(rustc --version)" >> $GITHUB_OUTPUT

      # Cache cross installation
      - name: Cache cross
        if: matrix.os == 'ubuntu-latest'
        id: cache-cross
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cross
          key: ${{ runner.os }}-cross-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock') }}

      # Cache OpenSSL installations
      - name: Cache OpenSSL
        if: matrix.os != 'ubuntu-latest'
        id: cache-openssl
        uses: actions/cache@v4
        with:
          path: |
            C:/vcpkg/installed
            /usr/local/opt/openssl@3
            ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-openssl-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      # Use Swatinem/rust-cache for Rust artifacts (replaces manual cargo caching)
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-${{ steps.rust-version.outputs.version }}
          shared-key: "release-build"
          cache-directories: |
            ~/.cargo/bin/
            target/

      # Install cross-rs for Linux builds only if not cached
      - name: Install cross
        if: matrix.os == 'ubuntu-latest' && steps.cache-cross.outputs.cache-hit != 'true'
        run: cargo install cross --git https://github.com/cross-rs/cross

      # Install OpenSSL on macOS - ARM64 only if not cached
      - name: Install OpenSSL (macOS)
        if: matrix.os == 'macos-latest' && steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      # Install OpenSSL on Windows if not cached
      - name: Install OpenSSL (Windows)
        if: matrix.os == 'windows-latest' && steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          vcpkg install openssl:x64-windows-static
          echo "OPENSSL_DIR=C:/vcpkg/installed/x64-windows-static" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV

      # Set OpenSSL env vars even if cached
      - name: Set OpenSSL env vars (Windows cached)
        if: matrix.os == 'windows-latest' && steps.cache-openssl.outputs.cache-hit == 'true'
        run: |
          echo "OPENSSL_DIR=C:/vcpkg/installed/x64-windows-static" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV

      - name: Set OpenSSL env vars (macOS cached)
        if: matrix.os == 'macos-latest' && steps.cache-openssl.outputs.cache-hit == 'true'
        run: |
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      # Build using cross for Linux targets
      - name: Build binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cross build --release --target ${{ matrix.target }}

      # Build directly for macOS and Windows
      - name: Build binary (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          
          # Strip binary with proper error handling
          if [[ "${{ matrix.os }}" != "windows-latest" && "${{ matrix.target }}" != "aarch64-apple-darwin" ]]; then
            if command -v strip &> /dev/null; then
              if strip sage 2>/dev/null; then
                echo "Binary stripped successfully"
              else
                echo "Warning: Failed to strip binary, continuing with unstripped binary"
              fi
            else
              echo "Warning: strip command not found, continuing with unstripped binary"
            fi
          fi
          
          # Create archive based on OS
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../sage-${{ matrix.target }}-${{ needs.update-version.outputs.new_version }}.zip sage.exe
          else
            tar czf ../../../sage-${{ matrix.target }}-${{ needs.update-version.outputs.new_version }}.tar.gz sage
          fi
          cd -

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last release tag with error handling
          LAST_TAG=$(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags | head -n 1 | sed 's|refs/tags/||' || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, using all commits"
            COMMITS=$(git log --format="* %s (%h)" --reverse)
          else
            echo "Found last tag: $LAST_TAG"
            COMMITS=$(git log ${LAST_TAG}..HEAD --format="* %s (%h)" --reverse)
          fi
          
          if [ -z "$COMMITS" ]; then
            echo "No new commits found, using placeholder"
            COMMITS="* No changes in this release"
          fi
          
          # Create changelog content with error handling
          {
            echo "# Changes in this release"
            echo ""
            echo "$COMMITS"
          } > CHANGELOG.md
          
          # Escape content for GitHub Actions with error handling
          CHANGELOG="${COMMITS//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "content=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.update-version.outputs.new_tag }}
          name: Release ${{ needs.update-version.outputs.new_tag }}
          body: ${{ steps.changelog.outputs.content }}
          prerelease: ${{ needs.analyze-commits.outputs.release_type == 'nightly' }}
          files: |
            sage-${{ matrix.target }}-${{ needs.update-version.outputs.new_version }}.*
