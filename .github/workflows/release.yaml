name: Release

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC every day

permissions:
  contents: write

jobs:
  analyze-commits:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.release-type.outputs.type }}
      version_bump: ${{ steps.release-type.outputs.bump }}
      has_changes: ${{ steps.changes.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for analyzing commits
      
      - name: Check for changes since last build
        id: changes
        run: |
          # Get the last release commit (either release or nightly)
          LAST_RELEASE=$(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags | head -n 1 || echo "")
          if [ -z "$LAST_RELEASE" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if there are any new commits since last release
          CHANGES=$(git log $LAST_RELEASE..HEAD --oneline)
          if [ -n "$CHANGES" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine release type
        id: release-type
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # Get commits since last release or all commits if no release exists
          LAST_RELEASE=$(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags | head -n 1 || echo "")
          if [ -z "$LAST_RELEASE" ]; then
            COMMITS=$(git log --format=%B)
          else
            COMMITS=$(git log $LAST_RELEASE..HEAD --format=%B)
          fi
          
          # Look for release commit
          if echo "$COMMITS" | grep -q "^release:"; then
            # Determine version bump based on conventional commits
            if echo "$COMMITS" | grep -q "^BREAKING CHANGE:" || echo "$COMMITS" | grep -q "!:"; then
              echo "type=release" >> $GITHUB_OUTPUT
              echo "bump=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "^feat:"; then
              echo "type=release" >> $GITHUB_OUTPUT
              echo "bump=minor" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "^fix:"; then
              echo "type=release" >> $GITHUB_OUTPUT
              echo "bump=patch" >> $GITHUB_OUTPUT
            else
              echo "type=release" >> $GITHUB_OUTPUT
              echo "bump=patch" >> $GITHUB_OUTPUT
            fi
          else
            # If no release commit, this is a nightly build
            if [ "${{ github.event_name }}" = "schedule" ]; then
              echo "type=nightly" >> $GITHUB_OUTPUT
              echo "bump=none" >> $GITHUB_OUTPUT
            else
              echo "type=skip" >> $GITHUB_OUTPUT
              echo "bump=none" >> $GITHUB_OUTPUT
            fi
          fi

  update-version:
    needs: analyze-commits
    if: needs.analyze-commits.outputs.release_type != 'skip'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      new_tag: ${{ steps.create-tag.outputs.tag }}
      is_release: ${{ steps.check_release.outputs.is_release }}
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          
          if [ "${{ needs.analyze-commits.outputs.release_type }}" = "nightly" ]; then
            # For nightly, append -nightly.YYYYMMDD.HASH
            HASH=$(git rev-parse --short HEAD)
            DATE=$(date +%Y%m%d)
            NEW_VERSION="$CURRENT_VERSION-nightly.$DATE.$HASH"
          else
            # For release, bump version according to conventional commits
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            case "${{ needs.analyze-commits.outputs.version_bump }}" in
              "major")
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              "patch")
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
          fi
          
          # Update Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        id: create-tag
        run: |
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          TAG="v$NEW_VERSION"
          
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Commit version bump
          git add Cargo.toml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          
          # Create and push tag
          git tag "$TAG"
          git push origin "$TAG"
          git push origin HEAD:${{ github.ref }}
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  build-and-release:
    needs: [analyze-commits, update-version]
    if: needs.analyze-commits.outputs.release_type != 'skip'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds using cross-rs
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            cross: true
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install cross-rs for Linux builds
      - name: Install cross
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cross --git https://github.com/cross-rs/cross

      # Install OpenSSL dependencies for Linux
      - name: Install OpenSSL (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config musl-tools
          if [[ "${{ matrix.target }}" == *"-musl" ]]; then
            # For musl targets
            sudo apt-get install -y musl-dev
            # Install and configure OpenSSL for musl
            wget https://www.openssl.org/source/openssl-3.1.5.tar.gz
            tar xf openssl-3.1.5.tar.gz
            cd openssl-3.1.5
            
            # Configure and build OpenSSL for musl
            if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
              export CFLAGS="-fPIC"
              ./Configure no-shared linux-aarch64 --prefix=/usr/local/musl --openssldir=/usr/local/musl
            else
              export CFLAGS="-fPIC"
              ./Configure no-shared linux-x86_64 --prefix=/usr/local/musl --openssldir=/usr/local/musl
            fi
            
            make -j$(nproc)
            sudo make install
            cd ..
            
            # Set environment variables for the build
            echo "OPENSSL_DIR=/usr/local/musl" >> $GITHUB_ENV
            echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          else
            # For glibc targets
            sudo apt-get install -y libssl-dev
          fi

      # Install OpenSSL on macOS
      - name: Install OpenSSL (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          if [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
            # For x86_64, we need to use x86_64 OpenSSL
            brew install openssl@3
            brew unlink openssl@3
            arch -x86_64 brew install openssl@3
            echo "OPENSSL_DIR=$(arch -x86_64 brew --prefix openssl@3)" >> $GITHUB_ENV
            echo "LIBRARY_PATH=$(arch -x86_64 brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          else
            # For ARM64, use the default ARM64 OpenSSL
            brew install openssl@3
            echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          fi

      # Install OpenSSL on Windows
      - name: Install OpenSSL (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install openssl:x64-windows-static
          echo "OPENSSL_DIR=C:/vcpkg/installed/x64-windows-static" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      # Build using cross for Linux targets
      - name: Build binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cross build --release --target ${{ matrix.target }}

      # Build directly for macOS and Windows
      - name: Build binary (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare archive
        shell: bash
        run: |
          # Strip binary on Unix systems (except macOS ARM64 which can't be stripped)
          if [[ "${{ matrix.os }}" != "windows-latest" && "${{ matrix.target }}" != "aarch64-apple-darwin" ]]; then
            strip "target/${{ matrix.target }}/release/sage" || true
          fi
          
          cd target/${{ matrix.target }}/release
          
          # Create archive based on OS
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../sage-${{ matrix.target }}-${{ needs.update-version.outputs.new_version }}.zip sage.exe
          else
            tar czf ../../../sage-${{ matrix.target }}-${{ needs.update-version.outputs.new_version }}.tar.gz sage
          fi
          cd -

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last release tag
          LAST_TAG=$(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags | head -n 1 | sed 's|refs/tags/||' || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # First release - use all commits
            COMMITS=$(git log --format="* %s (%h)" --reverse)
          else
            # Get commits since last release
            COMMITS=$(git log ${LAST_TAG}..HEAD --format="* %s (%h)" --reverse)
          fi
          
          # Create changelog content
          echo "# Changes in this release" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$COMMITS" >> CHANGELOG.md
          
          # Escape content for GitHub Actions
          CHANGELOG="${COMMITS//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "content=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.update-version.outputs.new_tag }}
          name: Release ${{ needs.update-version.outputs.new_tag }}
          body: ${{ steps.changelog.outputs.content }}
          prerelease: ${{ needs.analyze-commits.outputs.release_type == 'nightly' }}
          files: |
            sage-${{ matrix.target }}-${{ needs.update-version.outputs.new_version }}.*
